   0x08048424 <+0>:	push   %ebp
   0x08048425 <+1>:	mov    %esp,%ebp
   0x08048427 <+3>:	and    $0xfffffff0,%esp
   0x0804842a <+6>:	sub    $0x40,%esp
        -> alignement des variables
   0x0804842d <+9>:	mov    0xc(%ebp),%eax
        -> prend liste des arguments, le place dans $eax
   0x08048430 <+12>:	add    $0x4,%eax
        -> se déplace 4 octets après le debut de la liste -> arrive sur l'addresse du premier arg
   0x08048433 <+15>:	mov    (%eax),%eax
        -> place dans $eax ce qui est contenue dans l'addresse (premier arg)
   0x08048435 <+17>:	mov    %eax,(%esp)
        prend le premier argument
   0x08048438 <+20>:	call   0x8048360 <atoi@plt>
        ->envoi le premier arg à atoi
   0x0804843d <+25>:	mov    %eax,0x3c(%esp)
        ->place le resultat à l'addresse $esp+0x3c
   0x08048441 <+29>:	cmpl   $0x9,0x3c(%esp)
        ->compare ce resultat à 9
   0x08048446 <+34>:	jle    0x804844f <main+43>
   0x08048448 <+36>:	mov    $0x1,%eax
   0x0804844d <+41>:	jmp    0x80484a3 <main+127>
        -> si resultat supérieur à 9, va à la fin du programme (return)
   0x0804844f <+43>:	mov    0x3c(%esp),%eax
        -> place le resultat de atoi dans $eax
   0x08048453 <+47>:	lea    0x0(,%eax,4),%ecx
        -> multiplie $eax (resultat de atoi) par 4, et la place dans $ecx
   0x0804845a <+54>:	mov    0xc(%ebp),%eax
   0x0804845d <+57>:	add    $0x8,%eax
   0x08048460 <+60>:	mov    (%eax),%eax
        -> prend le second arg (valeur), et le met dans $eax
   0x08048462 <+62>:	mov    %eax,%edx
        -> met le second arg dans $edx
   0x08048464 <+64>:	lea    0x14(%esp),%eax
   0x08048468 <+68>:	mov    %ecx,0x8(%esp)
   0x0804846c <+72>:	mov    %edx,0x4(%esp)
   0x08048470 <+76>:	mov    %eax,(%esp)
   0x08048473 <+79>:	call   0x8048320 <memcpy@plt>
        -> appelle memcpy(eax, edx, ecx)
        -> memcpy(0x14(%esp), argv[2], atoi(argv[1]) * 4)
   0x08048478 <+84>:	cmpl   $0x574f4c46,0x3c(%esp)
   0x08048480 <+92>:	jne    0x804849e <main+122>
        -> si 0x3c(%esp) qui stocke normalement notre atoi(argv[1]) est != 0x574f4c46 (= 1464814662 en dec) alors saute jusqu'au return
   0x08048482 <+94>:	movl   $0x0,0x8(%esp)
   0x0804848a <+102>:	movl   $0x8048580,0x4(%esp)
   0x08048492 <+110>:	movl   $0x8048583,(%esp)
   0x08048499 <+117>:	call   0x8048350 <execl@plt>
        -> sinon exec(/bin/sh)
   0x0804849e <+122>:	mov    $0x0,%eax
   0x080484a3 <+127>:	leave  
   0x080484a4 <+128>:	ret